{"version":3,"sources":["components/ChartPage/ChartPage.module.css","components/ChartPage/Chart/Chart.module.css","components/ChartPage/SelectMenu/SelectMenu.module.css","store/hooks.ts","components/ChartPage/Chart/Chart.tsx","components/ChartPage/SelectMenu/SelectMenu.tsx","store/chartData-actions.ts","components/ChartPage/ChartPage.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","months","Chart","chartData","state","chart","timestamps","range","currTimeRange","sizes","pageHeight","pageWidth","console","log","length","className","classes","LoadingSpinner","ResponsiveContainer","width","height","AreaChart","data","margin","top","right","left","bottom","Area","dataKey","stroke","fill","activeDot","r","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","opacity","vertical","XAxis","axisLine","tickLine","tick","dateRange","interval","YAxis","tickCount","domain","type","Tooltip","content","CustomXAxisTick","props","x","y","payload","valueOfDate","value","index","day","prevMonth","month","prevYear","year","date","firstYear","String","split","splice","join","minute","seconds","Number","transform","dy","textAnchor","fontSize","CustomYAxisTick","price","toFixed","CustomTooltip","active","label","dateArr","React","memo","SelectMenu","dispatch","stockSymbol","currStock","symbol","useState","open","setOpen","title","selected","setSelected","selectHandler","option","timeData","chartActions","setCurrTimeRange","setChartData","stockData","name","stockName","setCurrStock","setIsLoading","isLoading","options","map","toLowerCase","onClick","toUpperCase","Math","random","toString","MenuContainer","Title","MarketChart","stockPrice","error","useEffect","useLayoutEffect","updateSize","window","innerHeight","innerWidth","setSizes","addEventListener","removeEventListener","ChartZone","HttpError","MarketContainer","LeftContainer","InfoContainer","InfoZone"],"mappings":"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","file":"static/js/4.953b902e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MarketContainer\":\"ChartPage_MarketContainer__3CeKS\",\"ChartZone\":\"ChartPage_ChartZone__381pB\",\"LeftContainer\":\"ChartPage_LeftContainer__3EsxR\",\"InfoContainer\":\"ChartPage_InfoContainer__1dHD2\",\"InfoZone\":\"ChartPage_InfoZone__22IZT\",\"HttpError\":\"ChartPage_HttpError__2ow_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tooltip\":\"Chart_Tooltip__275po\",\"Chart\":\"Chart_Chart__2tWds\",\"Ticks\":\"Chart_Ticks__1fR-g\",\"LoadingSpinner\":\"Chart_LoadingSpinner__2nWiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuContainer\":\"SelectMenu_MenuContainer__2jfQ-\",\"scrollable\":\"SelectMenu_scrollable__2KZQS\",\"Title\":\"SelectMenu_Title__2d2DL\",\"custom-select-wrapper\":\"SelectMenu_custom-select-wrapper__3DFba\",\"custom-select\":\"SelectMenu_custom-select__3cSsd\",\"custom-select__trigger\":\"SelectMenu_custom-select__trigger__h2kwW\",\"custom-options\":\"SelectMenu_custom-options__h51A7\",\"open\":\"SelectMenu_open__3trWo\",\"custom-option\":\"SelectMenu_custom-option__32BMX\",\"selected\":\"SelectMenu_selected__2rJP6\",\"arrow\":\"SelectMenu_arrow__2UgE1\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './index';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { useAppSelector } from '../../../store/hooks';\r\n\r\nimport classes from './Chart.module.css';\r\n\r\nimport LoadingSpinner from '../../UI/LoadingSpinner/LoadingSpinner';\r\n\r\nconst months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nconst Chart = () => {\r\n  const chartData = useAppSelector(state => state.chart.chartData);\r\n  const timestamps = useAppSelector(state => state.chart.timestamps);\r\n  const range = useAppSelector(state => state.chart.currTimeRange.range);\r\n  const { pageHeight, pageWidth } = useAppSelector(state => state.chart.sizes);\r\n\r\n  console.log(pageHeight, pageWidth);\r\n\r\n  if (chartData.length === 0 || timestamps.length === 0) {\r\n    return (\r\n      <div className={classes.LoadingSpinner}>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"90%\" height=\"95%\">\r\n      <AreaChart\r\n        width={500}\r\n        height={400}\r\n        data={chartData}\r\n        margin={{\r\n          top: 33,\r\n          right: 25,\r\n          left: 20,\r\n          bottom: 20,\r\n        }}\r\n      >\r\n        <Area\r\n          dataKey=\"price\"\r\n          stroke=\"black\"\r\n          fill=\"url(#color)\"\r\n          activeDot={{ fill: 'black', r: 6 }}\r\n        />\r\n\r\n        <defs>\r\n          <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"0%\" stopColor=\"#232b2b\" stopOpacity={0.3} />\r\n            <stop offset=\"85%\" stopColor=\"#232b2b\" stopOpacity={0.05} />\r\n          </linearGradient>\r\n        </defs>\r\n\r\n        <CartesianGrid opacity={0.5} vertical={false} />\r\n\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tick={\r\n            <CustomXAxisTick\r\n              dateRange={range}\r\n              timestamps={timestamps}\r\n              pageHeight={pageHeight}\r\n              pageWidth={pageWidth}\r\n            />\r\n          }\r\n          interval={0}\r\n        />\r\n\r\n        <YAxis\r\n          dataKey=\"price\"\r\n          axisLine={true}\r\n          tickLine={false}\r\n          tickCount={4}\r\n          domain={['auto', 'auto']}\r\n          tick={<CustomYAxisTick />}\r\n          type=\"number\"\r\n          interval={0}\r\n        />\r\n\r\n        <Tooltip content={<CustomTooltip range={range} />} />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nconst CustomXAxisTick = (props: any) => {\r\n  const {\r\n    x,\r\n    y,\r\n    payload,\r\n    dateRange: range,\r\n    timestamps,\r\n    pageHeight,\r\n    pageWidth,\r\n  } = props;\r\n  const { value: valueOfDate, index } = payload;\r\n\r\n  let day: number = 0,\r\n    prevMonth: number = 0,\r\n    month: number = 0,\r\n    prevYear: number = 0,\r\n    year: number = 0;\r\n\r\n  if (range !== '1d') {\r\n    day = timestamps[0][index];\r\n\r\n    prevMonth = timestamps[1][index - 1];\r\n    month = timestamps[1][index];\r\n\r\n    prevYear = timestamps[2][index - 1];\r\n    year = timestamps[2][index];\r\n  }\r\n\r\n  let date: string = '';\r\n\r\n  if (range === 'max') {\r\n    const firstYear = timestamps[2][0];\r\n\r\n    if (firstYear >= 2010) {\r\n      if (year !== prevYear && year % 2 === 0) date = String(year);\r\n    } else if (firstYear >= 2000) {\r\n      if (year !== prevYear && year % 4 === 0) date = String(year);\r\n    } else if (firstYear >= 1990) {\r\n      if (year !== prevYear && year % 6 === 0) date = String(year);\r\n    } else {\r\n      if (year !== prevYear && year % 8 === 0) date = String(year);\r\n    }\r\n  } else if (range === '5y') {\r\n    if (pageWidth <= 1000) {\r\n      if (year !== prevYear && index !== 0) date = String(year);\r\n    } else {\r\n      if (year !== prevYear) date = String(year);\r\n    }\r\n  } else if (range === '1y') {\r\n    if (month !== prevMonth && month % 2 !== 0) {\r\n      if (month === 1) date = String(year);\r\n      else date = `${months[month - 1].split('').splice(0, 3).join('')}`;\r\n    }\r\n  } else if (range === '6m') {\r\n    if (month !== prevMonth)\r\n      date = `${months[month - 1].split('').splice(0, 3).join('')}`;\r\n  } else if (range === '1m') {\r\n    if (index % 5 === 0)\r\n      date = `${months[month - 1].split('').splice(0, 3).join('')} ${day}`;\r\n  } else if (range === '5d') {\r\n    date = `${months[month - 1].split('').splice(0, 3).join('')} ${day}`;\r\n  } else if (range === '1d') {\r\n    const [minute, seconds] = valueOfDate.split(' ')[0].split(':');\r\n\r\n    if (pageWidth < 700) {\r\n      if (Number(minute) % 2 !== 0 && seconds === '00') date = valueOfDate;\r\n    } else {\r\n      if (seconds === '00') date = valueOfDate;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${x}, ${y})`}>\r\n      <text x={0} y={0} dy={16} textAnchor=\"middle\" fill=\"black\" fontSize={14}>\r\n        {date}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomYAxisTick = (props: any) => {\r\n  const { x, y, index, payload } = props;\r\n\r\n  const price = payload.value.toFixed(2);\r\n\r\n  if (index === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${x}, ${y})`}>\r\n      <text x={0} y={0} dy={5} textAnchor=\"end\">\r\n        {price}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = ({ active, payload, label, range }: any) => {\r\n  if (active) {\r\n    let date = '';\r\n\r\n    if (range === '1d') {\r\n      date = payload[0].payload.date;\r\n    } else {\r\n      const dateArr = label.split('-');\r\n\r\n      const day = dateArr[2];\r\n\r\n      let month = 'Jan';\r\n      if (dateArr[1][0] === '0') {\r\n        month = months[Number(dateArr[1][1]) - 1];\r\n      } else {\r\n        month = months[Number(dateArr[1]) - 1];\r\n      }\r\n\r\n      const year = dateArr[0];\r\n\r\n      date = `${day} ${month}, ${year}`;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Tooltip}>\r\n        <h4>{date}</h4>\r\n        <p>{Number(payload[0].value).toFixed(2)}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default React.memo(Chart);\r\n","import React, { useState } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks';\r\n\r\nimport {\r\n  changeCurrStock,\r\n  changeCurrRange,\r\n} from '../../../store/chartData-actions';\r\n\r\nimport classes from './SelectMenu.module.css';\r\n\r\ninterface typeOfProps {\r\n  title: string;\r\n  options: string[];\r\n}\r\n\r\nconst SelectMenu = (props: typeOfProps) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const stockSymbol = useAppSelector(state => state.chart.currStock.symbol);\r\n  const range = useAppSelector(state => state.chart.currTimeRange.range);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [selected, setSelected] = useState(\r\n    props.title === 'Stock' ? stockSymbol : range\r\n  );\r\n\r\n  const toggleOpenHandler = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const selectHandler = (option: string) => {\r\n    setSelected(option);\r\n\r\n    if (props.title === 'Range') {\r\n      let range = option,\r\n        interval = '1d';\r\n\r\n      if (range === '1d') interval = '15m';\r\n      if (range === '5y') interval = '1wk';\r\n      if (range === 'max') interval = '1mo';\r\n\r\n      dispatch(changeCurrRange({ range: range, interval: interval }));\r\n    }\r\n\r\n    if (props.title === 'Stock') {\r\n      let name = '',\r\n        symbol = '';\r\n\r\n      if (option === 'AAPL') {\r\n        name = 'Apple';\r\n        symbol = option;\r\n      } else if (option === 'FB') {\r\n        name = 'Facebook';\r\n        symbol = option;\r\n      } else if (option === 'AMZN') {\r\n        name = 'Amazon';\r\n        symbol = option;\r\n      } else if (option === 'NFLX') {\r\n        name = 'Netflix';\r\n        symbol = option;\r\n      } else if (option === 'GOOGL') {\r\n        name = 'Alphabet';\r\n        symbol = option;\r\n      } else if (option === 'TSLA') {\r\n        name = 'Tesla';\r\n        symbol = option;\r\n      } else if (option === 'MSFT') {\r\n        name = 'Microsoft';\r\n        symbol = option;\r\n      }\r\n\r\n      dispatch(changeCurrStock({ stockName: name, stockSymbol: symbol }));\r\n    }\r\n  };\r\n\r\n  const options = (\r\n    <div className={classes['custom-options']}>\r\n      {props.options.map(option => {\r\n        return (\r\n          <span\r\n            key={Math.random().toString()}\r\n            className={\r\n              selected === option\r\n                ? `${classes['custom-option']} ${classes['selected']}`\r\n                : `${classes['custom-option']}`\r\n            }\r\n            data-value={option.toLowerCase()}\r\n            onClick={() => selectHandler(option)}\r\n          >\r\n            {option.toUpperCase()}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n  return (\r\n    <div className={classes.MenuContainer}>\r\n      <h1 className={classes.Title}>{props.title}</h1>\r\n      <div\r\n        className={classes['custom-select-wrapper']}\r\n        onClick={() => toggleOpenHandler()}\r\n      >\r\n        <div\r\n          className={\r\n            open\r\n              ? `${classes['custom-select']} ${classes['open']}`\r\n              : `${classes['custom-select']}`\r\n          }\r\n        >\r\n          <div className={classes['custom-select__trigger']}>\r\n            <span>{selected.toUpperCase()}</span>\r\n            <div className={classes['arrow']}></div>\r\n          </div>\r\n          {options}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMenu;\r\n","import axios from 'axios';\r\nimport { AnyAction } from 'redux';\r\nimport { RootState } from './index';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\nimport { chartActions } from './chartData-slice';\r\n\r\nexport const fetchChartData =\r\n  (fetchInfo: {\r\n    currStock: { name: string; symbol: string };\r\n    currTimeRange: { range: string; interval: string };\r\n  }): ThunkAction<void, RootState, unknown, AnyAction> =>\r\n  async dispatch => {\r\n    const fetchData = async () => {\r\n      const { currStock, currTimeRange } = fetchInfo;\r\n\r\n      let httpRange = '';\r\n\r\n      if (currTimeRange.range === '1m') {\r\n        httpRange = '1mo';\r\n      } else if (currTimeRange.range === '6m') {\r\n        httpRange = '6mo';\r\n      } else {\r\n        httpRange = currTimeRange.range;\r\n      }\r\n\r\n      const response = await axios.request({\r\n        method: 'GET',\r\n        url: 'https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-charts',\r\n        params: {\r\n          symbol: currStock.symbol,\r\n          interval: currTimeRange.interval,\r\n          range: httpRange.toLowerCase(),\r\n          region: 'US',\r\n          comparisons: '^GDAXI,^FCHI',\r\n        },\r\n        headers: {\r\n          'x-rapidapi-key':\r\n            '41f084f51cmsh2fce017f88a0c79p175ce0jsn2d11f1030e8c',\r\n          'x-rapidapi-host': 'apidojo-yahoo-finance-v1.p.rapidapi.com',\r\n        },\r\n      });\r\n\r\n      if (response.statusText !== 'OK') {\r\n        throw new Error(\"Chart data couldn't be fetched\");\r\n      }\r\n\r\n      const quotes = response.data.chart.result[0].indicators.quote[0].close;\r\n      const timestamps = response.data.chart.result[0].timestamp;\r\n\r\n      const prices = [];\r\n\r\n      for (let i = 0; i < quotes.length; i++) {\r\n        let price = 0;\r\n\r\n        if (quotes[i] === null) {\r\n          price = (quotes[i - 2] + quotes[i - 1]) / 2;\r\n        } else {\r\n          price = quotes[i];\r\n        }\r\n\r\n        prices.push(Math.round((price + Number.EPSILON) * 100) / 100);\r\n      }\r\n\r\n      const dates = [];\r\n\r\n      const days = [];\r\n      const months = [];\r\n      const years = [];\r\n\r\n      if (currTimeRange.range === '1d') {\r\n        for (let i = 0; i < timestamps.length; i++) {\r\n          const hour = new Date(timestamps[i] * 1000)\r\n            .toLocaleDateString('en-US', {\r\n              hour: 'numeric',\r\n              minute: 'numeric',\r\n              hour12: true,\r\n            })\r\n            .split(',')[1]\r\n            .trim();\r\n\r\n          dates.push(hour);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < timestamps.length; i++) {\r\n          const date = new Date(timestamps[i] * 1000)\r\n            .toLocaleDateString('en-GB')\r\n            .split('/');\r\n\r\n          days.push(Number(date[0]));\r\n          months.push(Number(date[1]));\r\n          years.push(Number(date[2]));\r\n\r\n          dates.push([date[2], date[1], date[0]].join('-'));\r\n        }\r\n      }\r\n\r\n      const chartData = [];\r\n\r\n      for (let i = 0; i < prices.length; i++) {\r\n        chartData.push({ date: dates[i], price: prices[i] });\r\n      }\r\n\r\n      return {\r\n        stockPrice: prices[prices.length - 1],\r\n        chartData: chartData,\r\n        timeData: [days, months, years],\r\n      };\r\n    };\r\n\r\n    try {\r\n      const data = await fetchData();\r\n\r\n      dispatch(\r\n        chartActions.setChartData({\r\n          chartData: data.chartData,\r\n        })\r\n      );\r\n      dispatch(\r\n        chartActions.setTimestamps({\r\n          timestamps: data.timeData,\r\n        })\r\n      );\r\n      dispatch(\r\n        chartActions.setStockPrice({\r\n          price: data.stockPrice,\r\n        })\r\n      );\r\n      dispatch(\r\n        chartActions.setIsLoading({\r\n          isLoading: false,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        chartActions.setError({\r\n          error: true,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\nexport const changeCurrStock = (stockData: {\r\n  stockName: string;\r\n  stockSymbol: string;\r\n}): ThunkAction<void, RootState, unknown, AnyAction> => {\r\n  return dispatch => {\r\n    dispatch(\r\n      chartActions.setCurrStock({\r\n        name: stockData.stockName,\r\n        symbol: stockData.stockSymbol,\r\n      })\r\n    );\r\n    dispatch(\r\n      chartActions.setChartData({\r\n        chartData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      chartActions.setIsLoading({\r\n        isLoading: true,\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const changeCurrRange = (timeData: {\r\n  range: string;\r\n  interval: string;\r\n}): ThunkAction<void, RootState, unknown, AnyAction> => {\r\n  return dispatch => {\r\n    dispatch(\r\n      chartActions.setCurrTimeRange({\r\n        range: timeData.range,\r\n        interval: timeData.interval,\r\n      })\r\n    );\r\n    dispatch(\r\n      chartActions.setChartData({\r\n        chartData: [],\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const updateSizes = (sizes: {\r\n  height: number;\r\n  width: number;\r\n}): ThunkAction<void, RootState, unknown, AnyAction> => {\r\n  return dispatch => {\r\n    dispatch(\r\n      chartActions.setSizes({\r\n        height: sizes.height,\r\n        width: sizes.width,\r\n      })\r\n    );\r\n  };\r\n};\r\n","import React, { useEffect, useLayoutEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\n\r\nimport classes from './ChartPage.module.css';\r\n\r\nimport Chart from './Chart/Chart';\r\nimport SelectMenu from './SelectMenu/SelectMenu';\r\n\r\nimport { fetchChartData, updateSizes } from '../../store/chartData-actions';\r\n\r\nconst MarketChart = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currStock = useAppSelector(state => state.chart.currStock);\r\n  const currTimeRange = useAppSelector(state => state.chart.currTimeRange);\r\n  const stockPrice = useAppSelector(state => state.chart.stockPrice);\r\n  const isLoading = useAppSelector(state => state.chart.isLoading);\r\n  const error = useAppSelector(state => state.chart.error);\r\n\r\n  useEffect(() => {\r\n    // dispatch(fetchChartData({ currStock, currTimeRange }));\r\n  }, [dispatch, currStock, currTimeRange]);\r\n\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => {\r\n      dispatch(\r\n        updateSizes({ height: window.innerHeight, width: window.innerWidth })\r\n      );\r\n    };\r\n\r\n    window.addEventListener('resize', updateSize);\r\n\r\n    updateSize();\r\n\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  });\r\n\r\n  let content = (\r\n    <div className={classes.ChartZone}>\r\n      <h1>{`${currStock.name} Inc`}</h1>\r\n      <h2>{!isLoading ? `${stockPrice} USD` : `Price is loading`}</h2>\r\n      <Chart />\r\n    </div>\r\n  );\r\n\r\n  if (error) {\r\n    content = (\r\n      <div className={`${classes.ChartZone} ${classes.HttpError}`}>\r\n        <p>Something went wrong</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.MarketContainer}>\r\n      <div className={classes.LeftContainer}></div>\r\n      {content}\r\n      <div className={classes.InfoContainer}>\r\n        <div className={classes.InfoZone}>\r\n          <SelectMenu\r\n            title={'Stock'}\r\n            options={['AAPL', 'AMZN', 'FB', 'GOOGL', 'MSFT', 'NFLX', 'TSLA']}\r\n          />\r\n          <SelectMenu\r\n            title={'Range'}\r\n            options={['1d', '5d', '1m', '6m', '1y', '5y', 'max']}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketChart;\r\n"],"sourceRoot":""}