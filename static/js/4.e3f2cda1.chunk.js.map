{"version":3,"sources":["components/ChartPage/ChartPage.module.css","components/ChartPage/Chart/Chart.module.css","components/ChartPage/SelectMenu/SelectMenu.module.css","store/hooks.ts","components/ChartPage/Chart/Chart.tsx","components/ChartPage/SelectMenu/SelectMenu.tsx","store/chartData-actions.ts","components/ChartPage/ChartPage.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","months","Chart","chartData","state","chart","timestamps","range","currTimeRange","length","className","classes","LoadingSpinner","ResponsiveContainer","width","height","AreaChart","data","margin","top","right","left","bottom","Area","dataKey","stroke","fill","activeDot","r","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","opacity","vertical","XAxis","axisLine","tickLine","tick","dateRange","interval","YAxis","tickCount","domain","type","Tooltip","content","CustomXAxisTick","props","x","y","payload","valueOfDate","value","index","day","prevMonth","month","prevYear","year","date","firstYear","String","split","splice","join","transform","dy","textAnchor","fontSize","CustomYAxisTick","price","toFixed","CustomTooltip","active","label","dateArr","Number","React","memo","SelectMenu","dispatch","stockSymbol","currStock","symbol","useState","open","setOpen","title","toUpperCase","selected","setSelected","selectHandler","option","timeData","chartActions","setCurrTimeRange","setChartData","stockData","name","stockName","setCurrStock","setIsLoading","isLoading","options","map","toLowerCase","onClick","Math","random","toString","MenuContainer","Title","MarketChart","stockPrice","error","useEffect","fetchInfo","a","fetchData","httpRange","axios","request","method","url","params","region","comparisons","headers","response","statusText","Error","quotes","result","indicators","quote","close","timestamp","prices","i","push","round","EPSILON","dates","days","years","hour","Date","toLocaleDateString","minute","hour12","trim","setTimestamps","setStockPrice","setError","ChartZone","HttpError","MarketContainer","LeftContainer","InfoContainer","InfoZone"],"mappings":"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","file":"static/js/4.e3f2cda1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MarketContainer\":\"ChartPage_MarketContainer__3CeKS\",\"ChartZone\":\"ChartPage_ChartZone__381pB\",\"LeftContainer\":\"ChartPage_LeftContainer__3EsxR\",\"InfoContainer\":\"ChartPage_InfoContainer__1dHD2\",\"HttpError\":\"ChartPage_HttpError__2ow_m\",\"InfoZone\":\"ChartPage_InfoZone__22IZT\",\"Footer\":\"ChartPage_Footer__2ZyGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tooltip\":\"Chart_Tooltip__275po\",\"Chart\":\"Chart_Chart__2tWds\",\"Ticks\":\"Chart_Ticks__1fR-g\",\"LoadingSpinner\":\"Chart_LoadingSpinner__2nWiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuContainer\":\"SelectMenu_MenuContainer__2jfQ-\",\"scrollable\":\"SelectMenu_scrollable__2KZQS\",\"Title\":\"SelectMenu_Title__2d2DL\",\"custom-select-wrapper\":\"SelectMenu_custom-select-wrapper__3DFba\",\"custom-select\":\"SelectMenu_custom-select__3cSsd\",\"custom-select__trigger\":\"SelectMenu_custom-select__trigger__h2kwW\",\"custom-options\":\"SelectMenu_custom-options__h51A7\",\"open\":\"SelectMenu_open__3trWo\",\"custom-option\":\"SelectMenu_custom-option__32BMX\",\"selected\":\"SelectMenu_selected__2rJP6\",\"arrow\":\"SelectMenu_arrow__2UgE1\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './index';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { useAppSelector } from '../../../store/hooks';\r\n\r\nimport classes from './Chart.module.css';\r\n\r\nimport LoadingSpinner from '../../UI/LoadingSpinner/LoadingSpinner';\r\n\r\nconst months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nconst Chart = () => {\r\n  const chartData = useAppSelector(state => state.chart.chartData);\r\n  const timestamps = useAppSelector(state => state.chart.timestamps);\r\n  const range = useAppSelector(state => state.chart.currTimeRange.range);\r\n\r\n  if (chartData.length === 0 || timestamps.length === 0) {\r\n    return (\r\n      <div className={classes.LoadingSpinner}>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"90%\" height=\"95%\">\r\n      <AreaChart\r\n        width={500}\r\n        height={400}\r\n        data={chartData}\r\n        margin={{\r\n          top: 33,\r\n          right: 27,\r\n          left: 20,\r\n          bottom: 20,\r\n        }}\r\n      >\r\n        <Area\r\n          dataKey=\"price\"\r\n          stroke=\"black\"\r\n          fill=\"url(#color)\"\r\n          activeDot={{ fill: 'black', r: 6 }}\r\n        />\r\n\r\n        <defs>\r\n          <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"0%\" stopColor=\"#232b2b\" stopOpacity={0.3} />\r\n            <stop offset=\"85%\" stopColor=\"#232b2b\" stopOpacity={0.05} />\r\n          </linearGradient>\r\n        </defs>\r\n\r\n        <CartesianGrid opacity={0.5} vertical={false} />\r\n\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tick={<CustomXAxisTick dateRange={range} timestamps={timestamps} />}\r\n          interval={0}\r\n        />\r\n\r\n        <YAxis\r\n          dataKey=\"price\"\r\n          axisLine={true}\r\n          tickLine={false}\r\n          tickCount={4}\r\n          domain={['auto', 'auto']}\r\n          tick={<CustomYAxisTick />}\r\n          type=\"number\"\r\n          interval={0}\r\n        />\r\n\r\n        <Tooltip content={<CustomTooltip range={range} />} />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nconst CustomXAxisTick = (props: any) => {\r\n  const { x, y, payload, dateRange: range, timestamps } = props;\r\n  const { value: valueOfDate, index } = payload;\r\n\r\n  let day: number = 0,\r\n    prevMonth: number = 0,\r\n    month: number = 0,\r\n    prevYear: number = 0,\r\n    year: number = 0;\r\n\r\n  if (range !== '1d') {\r\n    day = timestamps[0][index];\r\n\r\n    prevMonth = timestamps[1][index - 1];\r\n    month = timestamps[1][index];\r\n\r\n    prevYear = timestamps[2][index - 1];\r\n    year = timestamps[2][index];\r\n  }\r\n\r\n  let date: string = '';\r\n\r\n  if (range === 'max') {\r\n    const firstYear = timestamps[2][0];\r\n\r\n    if (firstYear >= 2010) {\r\n      if (year !== prevYear && year % 2 === 0) date = String(year);\r\n    } else if (firstYear >= 2000) {\r\n      if (year !== prevYear && year % 4 === 0) date = String(year);\r\n    } else if (firstYear >= 1990) {\r\n      if (year !== prevYear && year % 6 === 0) date = String(year);\r\n    } else {\r\n      if (year !== prevYear && year % 8 === 0) date = String(year);\r\n    }\r\n  } else if (range === '5y') {\r\n    if (year !== prevYear) date = String(year);\r\n  } else if (range === '1y') {\r\n    if (month !== prevMonth && month % 2 !== 0) {\r\n      if (month === 1) date = String(year);\r\n      else date = `${months[month - 1].split('').splice(0, 3).join('')}`;\r\n    }\r\n  } else if (range === '6m') {\r\n    if (month !== prevMonth)\r\n      date = `${months[month - 1].split('').splice(0, 3).join('')}`;\r\n  } else if (range === '1m') {\r\n    if (index % 5 === 0)\r\n      date = `${months[month - 1].split('').splice(0, 3).join('')} ${day}`;\r\n  } else if (range === '5d') {\r\n    date = `${months[month - 1].split('').splice(0, 3).join('')} ${day}`;\r\n  } else if (range === '1d') {\r\n    if (valueOfDate.split(':')[1].split(' ')[0] === '00') date = valueOfDate;\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${x}, ${y})`}>\r\n      <text x={0} y={0} dy={16} textAnchor=\"middle\" fill=\"black\" fontSize={14}>\r\n        {date}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomYAxisTick = (props: any) => {\r\n  const { x, y, index, payload } = props;\r\n\r\n  const price = payload.value.toFixed(2);\r\n\r\n  if (index === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${x}, ${y})`}>\r\n      <text x={0} y={0} dy={5} textAnchor=\"end\">\r\n        {price}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = ({ active, payload, label, range }: any) => {\r\n  if (active) {\r\n    let date = '';\r\n\r\n    if (range === '1d') {\r\n      date = payload[0].payload.date;\r\n    } else {\r\n      const dateArr = label.split('-');\r\n\r\n      const day = dateArr[2];\r\n\r\n      let month = 'Jan';\r\n      if (dateArr[1][0] === '0') {\r\n        month = months[Number(dateArr[1][1]) - 1];\r\n      } else {\r\n        month = months[Number(dateArr[1]) - 1];\r\n      }\r\n\r\n      const year = dateArr[0];\r\n\r\n      date = `${day} ${month}, ${year}`;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Tooltip}>\r\n        <h4>{date}</h4>\r\n        <p>{Number(payload[0].value).toFixed(2)}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default React.memo(Chart);\r\n","import React, { useState } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks';\r\n\r\nimport {\r\n  changeCurrStock,\r\n  changeCurrRange,\r\n} from '../../../store/chartData-actions';\r\n\r\nimport classes from './SelectMenu.module.css';\r\n\r\ninterface typeOfProps {\r\n  title: string;\r\n  options: string[];\r\n}\r\n\r\nconst SelectMenu = (props: typeOfProps) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const stockSymbol = useAppSelector(state => state.chart.currStock.symbol);\r\n  const range = useAppSelector(state => state.chart.currTimeRange.range);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [selected, setSelected] = useState(\r\n    props.title === 'Stock' ? stockSymbol : range.toUpperCase()\r\n  );\r\n\r\n  const toggleOpenHandler = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const selectHandler = (option: string) => {\r\n    setSelected(option.toUpperCase());\r\n\r\n    if (props.title === 'Range') {\r\n      let range = option,\r\n        interval = '1d';\r\n\r\n      if (range === '1d') interval = '15m';\r\n      if (range === '5y') interval = '1wk';\r\n      if (range === 'max') interval = '1mo';\r\n\r\n      dispatch(changeCurrRange({ range: range, interval: interval }));\r\n    }\r\n\r\n    if (props.title === 'Stock') {\r\n      let name = '',\r\n        symbol = '';\r\n\r\n      if (option === 'AAPL') {\r\n        name = 'Apple';\r\n        symbol = option;\r\n      } else if (option === 'FB') {\r\n        name = 'Facebook';\r\n        symbol = option;\r\n      } else if (option === 'AMZN') {\r\n        name = 'Amazon';\r\n        symbol = option;\r\n      } else if (option === 'NFLX') {\r\n        name = 'Netflix';\r\n        symbol = option;\r\n      } else if (option === 'GOOGL') {\r\n        name = 'Alphabet';\r\n        symbol = option;\r\n      } else if (option === 'TSLA') {\r\n        name = 'Tesla';\r\n        symbol = option;\r\n      } else if (option === 'MSFT') {\r\n        name = 'Microsoft';\r\n        symbol = option;\r\n      }\r\n\r\n      dispatch(changeCurrStock({ stockName: name, stockSymbol: symbol }));\r\n    }\r\n  };\r\n\r\n  const options = (\r\n    <div className={classes['custom-options']}>\r\n      {props.options.map(option => {\r\n        return (\r\n          <span\r\n            key={Math.random().toString()}\r\n            className={\r\n              selected === option\r\n                ? `${classes['custom-option']} ${classes['selected']}`\r\n                : `${classes['custom-option']}`\r\n            }\r\n            data-value={option.toLowerCase()}\r\n            onClick={() => selectHandler(option)}\r\n          >\r\n            {option.toUpperCase()}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n  return (\r\n    <div className={classes.MenuContainer}>\r\n      <h1 className={classes.Title}>{props.title}</h1>\r\n      <div\r\n        className={classes['custom-select-wrapper']}\r\n        onClick={() => toggleOpenHandler()}\r\n      >\r\n        <div\r\n          className={\r\n            open\r\n              ? `${classes['custom-select']} ${classes['open']}`\r\n              : `${classes['custom-select']}`\r\n          }\r\n        >\r\n          <div className={classes['custom-select__trigger']}>\r\n            <span>{selected}</span>\r\n            <div className={classes['arrow']}></div>\r\n          </div>\r\n          {options}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMenu;\r\n","import axios from 'axios';\r\nimport { AnyAction } from 'redux';\r\nimport { RootState } from './index';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\nimport { chartActions } from './chartData-slice';\r\n\r\nexport const fetchChartData =\r\n  (fetchInfo: {\r\n    currStock: { name: string; symbol: string };\r\n    currTimeRange: { range: string; interval: string };\r\n  }): ThunkAction<void, RootState, unknown, AnyAction> =>\r\n  async dispatch => {\r\n    const fetchData = async () => {\r\n      const { currStock, currTimeRange } = fetchInfo;\r\n\r\n      let httpRange = '';\r\n\r\n      if (currTimeRange.range === '1m') {\r\n        httpRange = '1mo';\r\n      } else if (currTimeRange.range === '6m') {\r\n        httpRange = '6mo';\r\n      } else {\r\n        httpRange = currTimeRange.range;\r\n      }\r\n\r\n      const response = await axios.request({\r\n        method: 'GET',\r\n        url: 'https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-charts',\r\n        params: {\r\n          symbol: currStock.symbol,\r\n          interval: currTimeRange.interval,\r\n          range: httpRange.toLowerCase(),\r\n          region: 'US',\r\n          comparisons: '^GDAXI,^FCHI',\r\n        },\r\n        headers: {\r\n          'x-rapidapi-key':\r\n            '41f084f51cmsh2fce017f88a0c79p175ce0jsn2d11f1030e8c',\r\n          'x-rapidapi-host': 'apidojo-yahoo-finance-v1.p.rapidapi.com',\r\n        },\r\n      });\r\n\r\n      if (response.statusText !== 'OK') {\r\n        throw new Error(\"Chart data couldn't be fetched\");\r\n      }\r\n\r\n      const quotes = response.data.chart.result[0].indicators.quote[0].close;\r\n      const timestamps = response.data.chart.result[0].timestamp;\r\n\r\n      const prices = [];\r\n\r\n      for (let i = 0; i < quotes.length; i++) {\r\n        let price = 0;\r\n\r\n        if (quotes[i] === null) {\r\n          price = (quotes[i - 2] + quotes[i - 1]) / 2;\r\n        } else {\r\n          price = quotes[i];\r\n        }\r\n\r\n        prices.push(Math.round((price + Number.EPSILON) * 100) / 100);\r\n      }\r\n\r\n      const dates = [];\r\n\r\n      const days = [];\r\n      const months = [];\r\n      const years = [];\r\n\r\n      if (currTimeRange.range === '1d') {\r\n        for (let i = 0; i < timestamps.length; i++) {\r\n          const hour = new Date(timestamps[i] * 1000)\r\n            .toLocaleDateString('en-US', {\r\n              hour: 'numeric',\r\n              minute: 'numeric',\r\n              hour12: true,\r\n            })\r\n            .split(',')[1]\r\n            .trim();\r\n\r\n          dates.push(hour);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < timestamps.length; i++) {\r\n          const date = new Date(timestamps[i] * 1000)\r\n            .toLocaleDateString('en-GB')\r\n            .split('/');\r\n\r\n          days.push(Number(date[0]));\r\n          months.push(Number(date[1]));\r\n          years.push(Number(date[2]));\r\n\r\n          dates.push([date[2], date[1], date[0]].join('-'));\r\n        }\r\n      }\r\n\r\n      const chartData = [];\r\n\r\n      for (let i = 0; i < prices.length; i++) {\r\n        chartData.push({ date: dates[i], price: prices[i] });\r\n      }\r\n\r\n      return {\r\n        stockPrice: prices[prices.length - 1],\r\n        chartData: chartData,\r\n        timeData: [days, months, years],\r\n      };\r\n    };\r\n\r\n    try {\r\n      const data = await fetchData();\r\n\r\n      dispatch(\r\n        chartActions.setChartData({\r\n          chartData: data.chartData,\r\n        })\r\n      );\r\n      dispatch(\r\n        chartActions.setTimestamps({\r\n          timestamps: data.timeData,\r\n        })\r\n      );\r\n      dispatch(\r\n        chartActions.setStockPrice({\r\n          price: data.stockPrice,\r\n        })\r\n      );\r\n      dispatch(\r\n        chartActions.setIsLoading({\r\n          isLoading: false,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        chartActions.setError({\r\n          error: true,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\nexport const changeCurrStock = (stockData: {\r\n  stockName: string;\r\n  stockSymbol: string;\r\n}): ThunkAction<void, RootState, unknown, AnyAction> => {\r\n  return dispatch => {\r\n    dispatch(\r\n      chartActions.setCurrStock({\r\n        name: stockData.stockName,\r\n        symbol: stockData.stockSymbol,\r\n      })\r\n    );\r\n    dispatch(\r\n      chartActions.setChartData({\r\n        chartData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      chartActions.setIsLoading({\r\n        isLoading: true,\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const changeCurrRange = (timeData: {\r\n  range: string;\r\n  interval: string;\r\n}): ThunkAction<void, RootState, unknown, AnyAction> => {\r\n  return dispatch => {\r\n    dispatch(\r\n      chartActions.setCurrTimeRange({\r\n        range: timeData.range,\r\n        interval: timeData.interval,\r\n      })\r\n    );\r\n    dispatch(\r\n      chartActions.setChartData({\r\n        chartData: [],\r\n      })\r\n    );\r\n  };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\n\r\nimport classes from './ChartPage.module.css';\r\n\r\nimport Chart from './Chart/Chart';\r\nimport SelectMenu from './SelectMenu/SelectMenu';\r\n\r\nimport { fetchChartData } from '../../store/chartData-actions';\r\n\r\nconst MarketChart = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currStock = useAppSelector(state => state.chart.currStock);\r\n  const currTimeRange = useAppSelector(state => state.chart.currTimeRange);\r\n  const stockPrice = useAppSelector(state => state.chart.stockPrice);\r\n  const isLoading = useAppSelector(state => state.chart.isLoading);\r\n  const error = useAppSelector(state => state.chart.error);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchChartData({ currStock, currTimeRange }));\r\n  }, [dispatch, currStock, currTimeRange]);\r\n\r\n  let content = (\r\n    <div className={classes.ChartZone}>\r\n      <h1>{`${currStock.name} Inc`}</h1>\r\n      <h2>{!isLoading ? `${stockPrice} USD` : `Price is loading`}</h2>\r\n      <Chart />\r\n    </div>\r\n  );\r\n\r\n  if (error) {\r\n    content = (\r\n      <div className={`${classes.ChartZone} ${classes.HttpError}`}>\r\n        <p>Something went wrong</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.MarketContainer}>\r\n      <div className={classes.LeftContainer}></div>\r\n      {content}\r\n      <div className={classes.InfoContainer}></div>\r\n      <div className={classes.InfoZone}>\r\n        <SelectMenu\r\n          title={'Stock'}\r\n          options={['AAPL', 'AMZN', 'FB', 'GOOGL', 'MSFT', 'NFLX', 'TSLA']}\r\n        />\r\n        <SelectMenu\r\n          title={'Range'}\r\n          options={['1d', '5d', '1m', '6m', '1y', '5y', 'max']}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketChart;\r\n"],"sourceRoot":""}